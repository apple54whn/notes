(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{410:function(t,s,a){t.exports=a.p+"assets/img/snapshots.b1b35d23.png"},411:function(t,s,a){t.exports=a.p+"assets/img/data-model-1.77be7ca8.png"},412:function(t,s,a){t.exports=a.p+"assets/img/image-20190721142046089.8ad6f0d0.png"},603:function(t,s,a){"use strict";a.r(s);var e=a(2),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"git"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[t._v("#")]),t._v(" Git")]),t._v(" "),e("blockquote",[e("p",[t._v("Git 和其它版本控制系统（包括 Subversion 和近似工具）的主要差别在于 Git 对待数据的方法。其它大部分系统以文件变更列表的方式存储信息。这类系统（CVS、Subversion、Perforce、Bazaar 等等）将它们保存的信息看作是一组基本文件和每个文件随时间逐步累积的差异。")]),t._v(" "),e("p",[t._v("Git 更像是把数据看作是对"),e("strong",[t._v("小型文件系统的一组快照")]),t._v("。 每次你提交更新，或在 Git 中保存项目状态时，它主要对当时的全部文件制作一个快照并保存这个快照的索引。 为了高效，如果文件没有修改，Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。 Git 对待数据更像是一个 "),e("strong",[t._v("快照流")]),t._v("。")]),t._v(" "),e("p",[e("img",{attrs:{src:a(410),alt:"Git 存储项目随时间改变的快照。"}})])]),t._v(" "),e("h2",{attrs:{id:"安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[t._v("#")]),t._v(" 安装")]),t._v(" "),e("p",[t._v("官网有下载安装教程：https://git-scm.com/downloads，也可以使用homebrew安装。")]),t._v(" "),e("p",[t._v("利用"),e("code",[t._v("git —-version")]),t._v("查看安装的Git版本。")]),t._v(" "),e("h2",{attrs:{id:"配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[t._v("#")]),t._v(" 配置")]),t._v(" "),e("p",[t._v("三个作用域，缺省为"),e("code",[t._v("global")])]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("git config --local")]),t._v("，只对某个仓库有效，比 global 优先级高（配置文件在.git/config下）")]),t._v(" "),e("ul",[e("li",[t._v("HEAD文件里存储当前操作的分支名，如"),e("code",[t._v("ref: refs/heads/master")])]),t._v(" "),e("li",[t._v("config文件里存放就是配置信息")]),t._v(" "),e("li",[t._v("refs文件夹里存放heads（分支）和tags文件夹")]),t._v(" "),e("li",[t._v("objects文件夹里存放commit，blob，tree等")])]),t._v(" "),e("blockquote",[e("p",[t._v("可以通过"),e("code",[t._v("git cat-file -t ace1ed8923df..")]),t._v("来查看该Hash的对象类型；"),e("code",[t._v("-p")]),t._v("查看内容；")]),t._v(" "),e("p",[t._v("对象类型有commit，tree，blob。Git 是一个"),e("strong",[t._v("内容")]),t._v("寻址文件系统。Git 的核心部分是一个简单的键值对数据库（key-value data store），你可以向该数据库插入任意类型的内容，它会返回一个键值，通过该键值可以在任意时刻再次检索（retrieve）该内容。")]),t._v(" "),e("p",[e("img",{attrs:{src:a(411),alt:"简化版的 Git 数据模型。"}})]),t._v(" "),e("p",[e("img",{attrs:{src:a(412),alt:"image-20190721142046089"}})])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git config —-global")]),t._v("，对当前用户所有仓库有效（配置文件在~/.gitconfig下）")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git config —-system")]),t._v("，对系统所有用户的仓库有效，一般不用")])])]),t._v(" "),e("p",[t._v("若要显示config的配置，只需加上"),e("code",[t._v("--list")]),t._v("即可")]),t._v(" "),e("h3",{attrs:{id:"姓名和邮箱"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#姓名和邮箱"}},[t._v("#")]),t._v(" 姓名和邮箱")]),t._v(" "),e("p",[t._v("一般安装后需要配置name和email，配置完成后可以使用上述命令查看")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global user.name "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'conanan'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global user.email "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'54whn54@gmail.com'")]),t._v("\n")])])]),e("h3",{attrs:{id:"代理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代理"}},[t._v("#")]),t._v(" 代理")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),e("p",[t._v("根据自己 SSR 的 Socks5 本地监听端口修改")])]),t._v(" "),e("ul",[e("li",[e("p",[t._v("HTTP 和 HTTPS 代理")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global http.proxy socks5://127.0.0.1:1086\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global https.proxy socks5://127.0.0.1:1086\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如下配置在 Windows10 中起效，macOS中无效")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global http.proxy http://127.0.0.1:1086\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global https.proxy https://127.0.0.1:1086\n")])])])]),t._v(" "),e("li",[e("p",[t._v("SSH 代理")]),t._v(" "),e("p",[t._v("在ssh的配置文件~/.ssh/config（没有则新建，有则添加后续）使用ProxyCommand配置：")]),t._v(" "),e("p",[t._v("macOS 如下")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Host *\n  AddKeysToAgent yes\n  UseKeychain yes\n  IdentityFile ~/.ssh/id_rsa\nHost github.com\n  User git\n  Port 22\n  Hostname github.com\n  ProxyCommand nc -x 127.0.0.1:1086 %h %p\n")])])]),e("p",[t._v("Windows10 如下")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Host github.com\n\tUser git\n\tPort 22\n\tHostname github.com\n\tProxyCommand connect -S 127.0.0.1:1080 -a none %h %p\n")])])]),e("p",[t._v("说明："),e("code",[t._v("-a none")]),t._v("是NO-AUTH模式，不用输密码")])]),t._v(" "),e("li",[e("p",[t._v("取消代理")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global --unset http.proxy\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global --unset https.proxy\n")])])])])]),t._v(" "),e("h2",{attrs:{id:"常用命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用命令"}},[t._v("#")]),t._v(" 常用命令")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("已有项目代码纳入 Git 管理。会在该文件夹下创建"),e("code",[t._v(".git")]),t._v("文件夹")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init 项目所在文件夹\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#或")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" 项目所在文件夹\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init\n")])])]),e("p",[t._v("新建项目直接用 Git 管理。会在当前目录创建"),e("code",[t._v("your_project")]),t._v("文件夹，并在该文件夹中创建"),e("code",[t._v(".git")]),t._v("文件夹")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init your_project\n")])])])]),t._v(" "),e("li",[e("p",[t._v("克隆仓库")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone https://github.com/libgit2/libgit2 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("mylibgit"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#这会在当前目录下创建一个名为 “libgit2”或自定义的目录")]),t._v("\n")])])])]),t._v(" "),e("li",[e("p",[t._v("查看该"),e("strong",[t._v("工作目录")]),t._v("中未被 Git 管理的和已被 Git 管理的文件")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status\n")])])])]),t._v(" "),e("li",[e("p",[t._v("添加到 Git "),e("strong",[t._v("暂存区")]),t._v("。后面可以跟"),e("strong",[t._v("多个文件或文件夹，以空格隔开")]),t._v("；可以使用通配符"),e("code",[t._v("*")])]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" README.md\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" -A "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#添加所有")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" -u "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#添加所有在暂存区中改动的文件")]),t._v("\n")])])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("提交暂存区中的文件")]),t._v("到 Git 仓库")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'first commit'")]),t._v("\n")])])])]),t._v(" "),e("li",[e("p",[t._v("查看每次提交日志信息，有提交的Hash，作者（name + email），时间，提交的信息。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log\n")])])])])]),t._v(" "),e("h2",{attrs:{id:"修改暂存区中文件名"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#修改暂存区中文件名"}},[t._v("#")]),t._v(" 修改暂存区中文件名")]),t._v(" "),e("p",[t._v("一般会考虑修改工作目录文件名"),e("code",[t._v("mv")]),t._v("，删除暂存区中该文件"),e("code",[t._v("rm")]),t._v("，将新文件添加到暂存区。使用 Git 命令就可以很方便：")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("mv")]),t._v(" readme readme.md\n")])])]),e("h2",{attrs:{id:"查看版本历史"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看版本历史"}},[t._v("#")]),t._v(" 查看版本历史")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("查看当前分支每次提交日志信息，有提交的Hash，作者（name + email），时间，提交的信息。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log\n")])])])]),t._v(" "),e("li",[e("p",[t._v("查看最近n次")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log -n2\n")])])])]),t._v(" "),e("li",[e("p",[t._v("只查看提交信息（前面还有个不知道什么的7位16进制码）")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --oneline\n")])])])]),t._v(" "),e("li",[e("p",[t._v("查看所有分支的log，若写分支名则是指定分支的log")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --all\n")])])])]),t._v(" "),e("li",[e("p",[t._v("图形化")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --graph\n")])])])]),t._v(" "),e("li",[e("p",[t._v("真图形化")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("gitk\n")])])])])]),t._v(" "),e("h2",{attrs:{id:"分离头指针"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分离头指针"}},[t._v("#")]),t._v(" 分离头指针")]),t._v(" "),e("p",[t._v("HEAD指向一个commit，但是没有绑定到一个分支上，在切换分支时有可能Git会删掉。根据提示创建个分支即可。")])])}),[],!1,null,null,null);s.default=n.exports}}]);