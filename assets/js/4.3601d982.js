(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{315:function(t,s,a){t.exports=a.p+"assets/img/image-20200906183045914.01525739.png"},316:function(t,s,a){t.exports=a.p+"assets/img/image-20200906183316892.d1645012.png"},317:function(t,s,a){t.exports=a.p+"assets/img/image-20200906183353251.b5fb6e84.png"},318:function(t,s,a){t.exports=a.p+"assets/img/image-20200907231428537.ba2cfbdd.png"},319:function(t,s,a){t.exports=a.p+"assets/img/image-20200906184641374.f862c198.png"},320:function(t,s,a){t.exports=a.p+"assets/img/image-20200906232944700.5d2ae0fc.png"},321:function(t,s,a){t.exports=a.p+"assets/img/image-20200906191612003.d35ce7aa.png"},322:function(t,s,a){t.exports=a.p+"assets/img/image-20200906192804944.2441e6ce.png"},323:function(t,s,a){t.exports=a.p+"assets/img/image-20200906193556383.2fcba906.png"},324:function(t,s,a){t.exports=a.p+"assets/img/image-20200906195534311.a5885a7c.png"},325:function(t,s,a){t.exports=a.p+"assets/img/image-20200906200232296.5a998795.png"},326:function(t,s,a){t.exports=a.p+"assets/img/image-20200907232519821.9e96e9f3.png"},327:function(t,s,a){t.exports=a.p+"assets/img/image-20200907233136208.9735242d.png"},517:function(t,s,a){"use strict";a.r(s);var n=a(2),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[t._v("#")]),t._v(" 原理")]),t._v(" "),n("h2",{attrs:{id:"简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),n("p",[t._v("Spring Security 所解决的问题就是"),n("strong",[t._v("安全访问控制")]),t._v("，而安全访问控制功能其实就是"),n("strong",[t._v("对所有进入系统的请求进行拦截")]),t._v("，校验每个请求是否能够访问它所期望的资源。根据前边知识的学习，可以通过 Filter 或 Interceptor 或 其他 AOP 技术来实现。")]),t._v(" "),n("p",[t._v("Spring Security 对 Web 资源的保护是靠 "),n("strong",[t._v("Filter")]),t._v(" 实现的，所以从这个 Filter 来入手，逐步深入 Spring Security 原理。")]),t._v(" "),n("h2",{attrs:{id:"结构总览"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#结构总览"}},[t._v("#")]),t._v(" 结构总览")]),t._v(" "),n("p",[t._v("Spring Boot 自动配置部分流程：")]),t._v(" "),n("h3",{attrs:{id:"springsecurityfilterchain-🔥"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#springsecurityfilterchain-🔥"}},[t._v("#")]),t._v(" springSecurityFilterChain 🔥")]),t._v(" "),n("p",[t._v("启用 Spring Security 的默认配置，该配置将创建一个名为 "),n("code",[t._v("springSecurityFilterChain")]),t._v(" 的 Servlet Filter bean，类型为 "),n("code",[t._v("org.springframework.security.web.FilterChainProxy")]),t._v("，它实现了"),n("code",[t._v("javax.servlet.Filter")]),t._v("，因此外部的请求会经过此类。")]),t._v(" "),n("p",[t._v("此 bean 负责应用程序内的所有安全性（验证提交的用户名和密码，重定向到登录表单等，保护应用程序 URL 等）。下图是 Spring Security 过滤器链结构图：")]),t._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:a(315),alt:"image-20200906183045914"}}),t._v(" "),n("p",[t._v("FilterChainProxy 是一个代理，真正起作用的是 FilterChainProxy 中 SecurityFilterChain 所"),n("strong",[t._v("包含的各个 Filter")]),t._v("，同时这些 Filter 作为 Bean 被 Spring 管理，它们是Spring Security核心，各有各的职责，但他们并"),n("strong",[t._v("不直接处理")]),t._v("用户的"),n("strong",[t._v("认证")]),t._v("，也"),n("strong",[t._v("不直接处理")]),t._v("用户的"),n("strong",[t._v("授权")]),t._v("，而是把它们交给了认证管理器（"),n("strong",[t._v("AuthenticationManager")]),t._v("）和决策管理器（"),n("strong",[t._v("AccessDecisionManager")]),t._v("）进行处理，下图是 FilterChainProxy 相关类的UML图示：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(316),alt:"image-20200906183316892"}})]),t._v(" "),n("p",[t._v("Spring Security 功能的实现主要是由一系列过滤器链相互配合完成。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(317),alt:"image-20200906183353251"}})]),t._v(" "),n("p",[t._v("下面介绍过滤器链中主要的几个过滤器及其作用：")]),t._v(" "),n("h3",{attrs:{id:"securitycontextpersistencefilter"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#securitycontextpersistencefilter"}},[t._v("#")]),t._v(" SecurityContextPersistenceFilter")]),t._v(" "),n("p",[t._v("这个 Filter 是整个拦截过程的入口和出口（也就是第一个和最后一个拦截器），会在请求开始时从配置好的 SecurityContextRepository 中获取 SecurityContext，然后把它设置给 SecurityContextHolder。在请求完成后将 SecurityContextHolder 持有的 SecurityContext 再保存到配置好的 SecurityContextRepository，同时清除 securityContextHolder 所持有的 SecurityContext；")]),t._v(" "),n("h3",{attrs:{id:"usernamepasswordauthenticationfilter-🔥"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#usernamepasswordauthenticationfilter-🔥"}},[t._v("#")]),t._v(" UsernamePasswordAuthenticationFilter 🔥")]),t._v(" "),n("p",[t._v("用于处理来自表单提交的"),n("strong",[t._v("认证")]),t._v("。该表单必须提供对应的用户名和密码，其内部还有登录成功或失败后进行处理的 "),n("strong",[t._v("AuthenticationSuccessHandler")]),t._v(" 和 "),n("strong",[t._v("AuthenticationFailureHandler")]),t._v("，这些都可以根据需求做相关改变；")]),t._v(" "),n("h3",{attrs:{id:"filtersecurityinterceptor"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#filtersecurityinterceptor"}},[t._v("#")]),t._v(" FilterSecurityInterceptor")]),t._v(" "),n("p",[t._v("用于保护 Web 资源的，使用 AccessDecisionManager 对"),n("strong",[t._v("当前用户进行授权访问")]),t._v("，前面已经详细介绍过了；")]),t._v(" "),n("h3",{attrs:{id:"exceptiontranslationfilter"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#exceptiontranslationfilter"}},[t._v("#")]),t._v(" ExceptionTranslationFilter")]),t._v(" "),n("p",[t._v("能够捕获来自 FilterChain 所有的"),n("strong",[t._v("异常")]),t._v("，并进行处理。但是它只会处理两类异常："),n("strong",[t._v("AuthenticationException")]),t._v(" 和 "),n("strong",[t._v("AccessDeniedException")]),t._v("（对应上述两个 Manager），其它的异常它会继续抛出。")]),t._v(" "),n("h2",{attrs:{id:"认证流程-🔥"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#认证流程-🔥"}},[t._v("#")]),t._v(" 认证流程 🔥")]),t._v(" "),n("h3",{attrs:{id:"流程图"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#流程图"}},[t._v("#")]),t._v(" 流程图")]),t._v(" "),n("p",[n("img",{attrs:{src:a(318),alt:"image-20200907231428537"}})]),t._v(" "),n("p",[n("img",{attrs:{src:a(319),alt:"image-20200906184641374"}})]),t._v(" "),n("ol",[n("li",[t._v("用户提交用户名、密码被 SecurityFilterChain 中的 "),n("strong",[t._v("UsernamePasswordAuthenticationFilter")]),t._v(" 过滤器获取到， 封装为请求Authentication，通常情况下是 UsernamePasswordAuthenticationToken 这个实现类。")]),t._v(" "),n("li",[t._v("然后过滤器将 Authentication 提交至认证管理器（AuthenticationManager）进行认证")]),t._v(" "),n("li",[t._v("认证成功后， AuthenticationManager 身份管理器返回一个被填充满了信息的（包括上面提到的权限信息，身份信息，细节信息，但密码通常会被移除。这个一般是查询数据库得出的） Authentication 实例。")]),t._v(" "),n("li",[t._v("SecurityContextHolder 安全上下文容器将第 3 步填充了信息的 Authentication ，通过 SecurityContextHolder.getContext().setAuthentication(…) 方法，设置到其中。")])]),t._v(" "),n("p",[t._v("可以看出 AuthenticationManager 接口（认证管理器）是认证相关的核心接口，也是发起认证的出发点，它的实现类为 ProviderManager。而 Spring Security 支持多种认证方式，因此 ProviderManager 维护着一个 "),n("code",[t._v("List<AuthenticationProvider>")]),t._v(" 列表，存放多种认证方式（"),n("strong",[t._v("这才是最终干活的")]),t._v("），最终实际的认证工作是由 AuthenticationProvider 完成的。咱们知道 Web 表单的对应的 AuthenticationProvider 实现类为 "),n("strong",[t._v("DaoAuthenticationProvider")]),t._v("，它的内部又维护着一个 "),n("strong",[t._v("UserDetailsService")]),t._v(" 负责 UserDetails 的获取。最终 AuthenticationProvider 将 UserDetails 填充至 Authentication。")]),t._v(" "),n("p",[t._v("认证核心组件的大体关系如下：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(320),alt:"image-20200906232944700"}})]),t._v(" "),n("h3",{attrs:{id:"debug"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#debug"}},[t._v("#")]),t._v(" Debug")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("用户提交用户名、密码被 SecurityFilterChain 中的 "),n("strong",[t._v("UsernamePasswordAuthenticationFilter")]),t._v(" 过滤器获取到。找到该类，其继承了抽象 Filter 类 AbstractAuthenticationProcessingFilter，在其中的"),n("code",[t._v("doFilter")]),t._v("方法中可以看到：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(321),alt:"image-20200906191612003"}})]),t._v(" "),n("p",[t._v("在尝试认证方法中，其实是调用的"),n("code",[t._v("UsernamePasswordAuthenticationFilter")]),t._v("的方法")]),t._v(" "),n("p",[n("img",{attrs:{src:a(322),alt:"image-20200906192804944"}}),t._v("认证方法，获取 "),n("code",[t._v("AuthenticationManager")]),t._v("，实现类为 "),n("code",[t._v("ProviderManager")]),t._v("，ProviderManager 提供了许多 "),n("code",[t._v("AuthenticationProvider")]),t._v("：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(323),alt:"image-20200906193556383"}})]),t._v(" "),n("p",[t._v("【重点】抽象类"),n("code",[t._v("AbstractUserDetailsAuthenticationProvider")]),t._v("实现了"),n("code",[t._v("AuthenticationProvider")]),t._v("， "),n("code",[t._v("DaoAuthenticationProvider")]),t._v("又继承了该抽象类，DaoAuthenticationProvider 中又维护了一个 "),n("code",[t._v("UserDetailsService")]),t._v("，查询出 username 对应的用户")]),t._v(" "),n("p",[n("img",{attrs:{src:a(324),alt:"image-20200906195534311"}})]),t._v(" "),n("p",[t._v("使用"),n("code",[t._v("DaoAuthenticationProvider")]),t._v("的如下方法判断密码正确性")]),t._v(" "),n("p",[n("img",{attrs:{src:a(325),alt:"image-20200906200232296"}})])])]),t._v(" "),n("h3",{attrs:{id:"authenticationmanager-接口-🔥"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#authenticationmanager-接口-🔥"}},[t._v("#")]),t._v(" AuthenticationManager 接口 🔥")]),t._v(" "),n("h3",{attrs:{id:"providermanager-类-🔥"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#providermanager-类-🔥"}},[t._v("#")]),t._v(" ProviderManager 类 🔥")]),t._v(" "),n("h3",{attrs:{id:"authenticationprovider-接口🔥"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#authenticationprovider-接口🔥"}},[t._v("#")]),t._v(" AuthenticationProvider 接口🔥")]),t._v(" "),n("p",[t._v("通过前面的 Spring Security 认证流程我们得知，"),n("strong",[t._v("认证管理器（AuthenticationManager）委托 AuthenticationProvider")]),t._v("（间接通过 ProviderManager） 完成认证工作。AuthenticationProvider 是一个接口，定义如下：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AuthenticationProvider")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Authentication")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("authenticate")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Authentication")]),t._v(" authentication"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AuthenticationException")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("supports")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" authentication"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[n("code",[t._v("authenticate()")]),t._v("方法定义了"),n("strong",[t._v("认证的实现过程")]),t._v("，它的参数是一个 Authentication，里面包含了登录用户所提交的用户、密码等。而返回值也是一个 Authentication，这个 Authentication 则是在认证成功后，将用户的权限及其他信息重新组装后生成。")]),t._v(" "),n("p",[t._v("Spring Security 中维护着一个 "),n("code",[t._v("List<AuthenticationProvider>")]),t._v(" 列表，存放多种认证方式，不同的认证方式使用不同的 AuthenticationProvider。如使用用户名密码登录时，使用 AuthenticationProvider1，短信登录时使用 AuthenticationProvider2 等等这样的例子很多。")]),t._v(" "),n("p",[t._v("每个 AuthenticationProvider 需要实现"),n("code",[t._v("supports()")]),t._v("方法来"),n("strong",[t._v("表明自己支持的认证方式")]),t._v("，如我们使用表单方式认证，在提交请求时 Spring Security 会生成 UsernamePasswordAuthenticationToken，它是一个 Authentication，里面封装着用户提交的用户名、密码信息。而对应的，哪个 AuthenticationProvider 来处理它？")]),t._v(" "),n("h3",{attrs:{id:"abstractuserdetailsauthenticationprovider-抽象类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#abstractuserdetailsauthenticationprovider-抽象类"}},[t._v("#")]),t._v(" AbstractUserDetailsAuthenticationProvider 抽象类")]),t._v(" "),n("p",[t._v("我们在"),n("strong",[t._v("DaoAuthenticationProvider")]),t._v("的基类 "),n("strong",[t._v("AbstractUserDetailsAuthenticationProvider")]),t._v(" 发现以下代码：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("supports")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" authentication"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UsernamePasswordAuthenticationToken")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("isAssignableFrom")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("authentication"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"daoauthenticationprovider-类-🔥"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#daoauthenticationprovider-类-🔥"}},[t._v("#")]),t._v(" DaoAuthenticationProvider 类 🔥")]),t._v(" "),n("p",[t._v("也就是说当 Web 表单提交用户名密码时，Spring Security 由 "),n("strong",[t._v("DaoAuthenticationProvider")]),t._v("处理。")]),t._v(" "),n("h3",{attrs:{id:"authentication-接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#authentication-接口"}},[t._v("#")]),t._v(" Authentication 接口")]),t._v(" "),n("p",[t._v("认证信息接口，之前提到的 UsernamePasswordAuthenticationToken 就是它的实现之一")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Authentication")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Principal")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Serializable")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collection")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GrantedAuthority")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAuthorities")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getCredentials")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getDetails")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPrincipal")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("isAuthenticated")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setAuthenticated")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" var1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IllegalArgumentException")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("ul",[n("li",[n("code",[t._v("Authentication")]),t._v(" 是 Spring Security 包中的接口，直接继承自 "),n("strong",[t._v("Principal")]),t._v("（主要，主体） 类，而 Principal 是位于 java.security 包中的。它是表示着一个抽象主体身份，任何主体都有一个名称，因此包含一个"),n("code",[t._v("getName()")]),t._v("方法。")]),t._v(" "),n("li",[n("code",[t._v("getAuthorities()")]),t._v("，权限信息列表，默认是 GrantedAuthority 接口的一些实现类，通常是代表权限信息的一系列字符串。")]),t._v(" "),n("li",[n("code",[t._v("getCredentials()")]),t._v("，凭证信息，用户输入的密码字符串，在认证过后通常会被移除，用于保障安全。")]),t._v(" "),n("li",[n("code",[t._v("getDetails()")]),t._v("，细节信息，Web 应用中的实现接口通常为 WebAuthenticationDetails，它记录了访问者的 IP 地址和SESSIONID 的值。")]),t._v(" "),n("li",[t._v("【重要】"),n("code",[t._v("getPrincipal()")]),t._v("，身份信息，大部分情况下返回的是 UserDetails 接口的实现类，UserDetails 代表用户的详细信息，那从 Authentication 中取出来的 UserDetails 就是当前登录用户信息，它也是框架中的常用接口之一。")])]),t._v(" "),n("h3",{attrs:{id:"usernamepasswordauthenticationtoken-类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#usernamepasswordauthenticationtoken-类"}},[t._v("#")]),t._v(" UsernamePasswordAuthenticationToken 类")]),t._v(" "),n("p",[t._v("实现了 Authentication 接口")]),t._v(" "),n("h3",{attrs:{id:"userdetailsservice-接口（可自定义）🔥"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#userdetailsservice-接口（可自定义）🔥"}},[t._v("#")]),t._v(" UserDetailsService 接口（可自定义）🔥")]),t._v(" "),n("p",[t._v("现在咱们现在知道 DaoAuthenticationProvider 处理了 Web 表单的认证逻辑，认证成功后既得到一个 Authentication(UsernamePasswordAuthenticationToken实现 )，里面包含了身份（主体）信息（Principal）。这个身份信息就是一个 Object ，大多数情况下它可以被强转为 UserDetails 对象。")]),t._v(" "),n("p",[t._v("DaoAuthenticationProvider 中包含了一个 UserDetailsService 实例，它负责根据用户名提取用户信息 UserDetails (包含密码)，而后 DaoAuthenticationProvider 会去对比 UserDetailsService 提取的用户密码与用户提交的密码是否匹配作为认证成功的关键依据，因此可以通过将自定义的 UserDetailsService 公开为 Spring Bean来自定义身份验证。")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("top"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("conanan"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("security"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("service")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("springframework"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("security"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("core"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("userdetails")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("springframework"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("security"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("core"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("userdetails")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserDetails")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("springframework"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("security"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("core"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("userdetails")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserDetailsService")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("springframework"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("security"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("core"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("userdetails")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UsernameNotFoundException")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("springframework"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stereotype")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Service")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * 自定义 UserDetailsService\n */")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Service")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SpringDataUserDetailsService")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserDetailsService")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserDetails")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("loadUserByUsername")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" username"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UsernameNotFoundException")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 连接数据库，根据 username 查询用户")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"username:"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" username"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("withUsername")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"zhangsan"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("password")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"123"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("authorities")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"p1"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("build")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("很多人把 DaoAuthenticationProvider 和 UserDetailsService 的职责搞混淆，"),n("strong",[t._v("其实 UserDetailsService 只负责从特定的地方（通常是数据库）加载用户信息")]),t._v("，仅此而已。而 DaoAuthenticationProvider 的职责更大，它"),n("strong",[t._v("完成完整的认证流程")]),t._v("，同时会"),n("strong",[t._v("把UserDetails 填充至 Authentication")]),t._v("。")]),t._v(" "),n("h3",{attrs:{id:"userdetails-接口（可自定义）🔥"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#userdetails-接口（可自定义）🔥"}},[t._v("#")]),t._v(" UserDetails 接口（可自定义）🔥")]),t._v(" "),n("p",[t._v("Spring Security 提供的接口")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserDetails")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Serializable")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collection")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GrantedAuthority")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAuthorities")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPassword")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getUsername")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("isAccountNonExpired")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("isAccountNonLocked")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("isCredentialsNonExpired")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("isEnabled")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("它和 Authentication 接口很类似，比如他们都拥有 username，authorities。Authentication 的 getCredentials() 与 UserDetails 中的 getPassword() 需要被区分对待，前者是用户提交的密码凭证，后者是用户实际存储的密码，认证其实就是对这两者的比对。Authentication 中 的getAuthorities() 实际是由 UserDetails 的 getAuthorities() 传递而形成的。还记得 Authentication接口中的getDetails() 方法吗？其中的 UserDetails 用户详细信息便是经过了 AuthenticationProvider 认证之后被填充的。")]),t._v(" "),n("p",[t._v("通过实现UserDetailsService和UserDetails，我们可以完成对用户信息获取方式以及用户信息字段的扩展。Spring Security 提供的InMemoryUserDetailsManager（内存认证），JdbcUserDetailsManager（JDBC认证）就是 UserDetailsService的实现类，主要区别无非就是从内存还是从数据库加载用户。")]),t._v(" "),n("h3",{attrs:{id:"user-类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#user-类"}},[t._v("#")]),t._v(" User 类")]),t._v(" "),n("p",[t._v("实现了 UserDetails 接口")]),t._v(" "),n("h3",{attrs:{id:"passwordencoder-接口-🔥"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#passwordencoder-接口-🔥"}},[t._v("#")]),t._v(" PasswordEncoder 接口 🔥")]),t._v(" "),n("p",[t._v("DaoAuthenticationProvider 认证处理器通过 UserDetailsService 获取到 UserDetails 后，它是如何与请求 Authentication中的密码做对比呢？")]),t._v(" "),n("p",[t._v("在这里 Spring Security 为了适应多种多样的加密类型，又做了抽象，DaoAuthenticationProvider 通过 PasswordEncoder 接口的"),n("code",[t._v("matches()")]),t._v(" 方法进行密码的对比，而具体的密码对比细节取决于实现：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PasswordEncoder")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("encode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CharSequence")]),t._v(" var1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("matches")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CharSequence")]),t._v(" var1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" var2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("upgradeEncoding")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" encodedPassword"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("密码比较流程如下：")]),t._v(" "),n("ol",[n("li",[t._v("用户输入密码（明文），称作 credentials 凭证")]),t._v(" "),n("li",[t._v("DaoAuthenticationProvider 获取 UserDetails（其中存储了用户的正确密码，即 password）")]),t._v(" "),n("li",[t._v("DaoAuthenticationProvider 使用 PasswordEncoder 接口的"),n("code",[t._v("matches")]),t._v("方法对输入的密码和正确的密码进行校验，密码一致则校验通过，否则校验失败")])]),t._v(" "),n("p",[t._v("Spring Security 提供很多内置的 PasswordEncoder，能够开箱即用，使用某种PasswordEncoder只需要进行如下声明即可：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Bean")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PasswordEncoder")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("passwordEncoder")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Spring Security 会根据此配置来决定密码是否编码")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NoOpPasswordEncoder")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("NoOpPasswordEncoder采用字符串匹配方法，不对密码进行加密比较处理，直接拿输入的密码和 UserDetails 中的正确密码进行字符串比较，字符串内容一致则校验通过，否则校验失败")]),t._v(" "),n("p",[t._v("实际项目中推荐使用 BCryptPasswordEncoder，Pbkdf2PasswordEncoder，SCryptPasswordEncoder 等。配置BCryptPasswordEncoder 如下：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Bean")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PasswordEncoder")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("passwordEncoder")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BCryptPasswordEncoder")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("测试发现认证失败，提示：Encoded password does not look like BCrypt。")]),t._v(" "),n("p",[t._v("测试BCrypt：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@SpringBootTest")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SecurityApplicationTests")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Test")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("testBcrypt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对密码加密")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" hashpw1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BCrypt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("hashpw")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"123"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BCrypt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("gensalt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" hashpw2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BCrypt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("hashpw")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"123"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BCrypt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("gensalt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hashpw1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// $2a$10$VD2tV49..qSgU6g3UA4rIeqVsXdEQuTigZ5aA2GH9ldkYj6kAL6Au")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hashpw2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// $2a$10$cxbggOZmwj66AQGN9pYXN.SYKpUeX4RMl4BY3Nm6Yn07sg7/8F.ge")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 结果是两次都不一样（可能是每次获取的 salt 不一样），但是这样在校验时能一致吗？")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 校验密码")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" checkpw1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BCrypt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("checkpw")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"123"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" hashpw1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" checkpw2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BCrypt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("checkpw")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"123"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" hashpw2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("checkpw1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('","')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" checkpw2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true,true")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("此时可以将自定义的 UserDetailsService 实现类中的密码改为加密后的来测试了，实际中也是在数据库中存储加密后的密码")]),t._v(" "),n("h2",{attrs:{id:"授权流程-🔥"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#授权流程-🔥"}},[t._v("#")]),t._v(" 授权流程 🔥")]),t._v(" "),n("h3",{attrs:{id:"流程图-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#流程图-2"}},[t._v("#")]),t._v(" 流程图")]),t._v(" "),n("p",[t._v("通过之前的 Spring Security 安全配置可以看出，Spring Security 通过"),n("code",[t._v("http.authorizeRequests()")]),t._v("对 Web 请求进行授权保护。Spring Security使用标准 Filter 建立了对 Web 请求的拦截，最终实现对资源的授权访问。其授权流程如下：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(326),alt:"image-20200907232519821"}})]),t._v(" "),n("p",[t._v("主要分为三步：")]),t._v(" "),n("ol",[n("li",[n("p",[n("strong",[t._v("拦截请求")]),t._v("，已认证用户访问受保护的 Web 资源将被 SecurityFilterChain 中的 FilterSecurityInterceptor 的子类拦截。")])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("获取资源访问策略")]),t._v("，FilterSecurityInterceptor 会从 SecurityMetadataSource 的子类 DefaultFilterInvocationSecurityMetadataSource 获取要访问当前资源"),n("strong",[t._v("所要求")]),t._v("的权限 "),n("code",[t._v("Collection<ConfigAttribute>")]),t._v(" 。")]),t._v(" "),n("p",[t._v("SecurityMetadataSource 其实就是读取访问策略的抽象，而读取的内容就是我们配置的访问规则，如：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[t._v("http"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("authorizeRequests")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("antMatchers")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/r/r1"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasAuthority")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"p1"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("antMatchers")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/r/r2"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasAuthority")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"p2"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n")])])])]),t._v(" "),n("li",[n("p",[t._v("最后，FilterSecurityInterceptor 会调用 "),n("strong",[t._v("AccessDecisionManager")]),t._v(" 进行授权决策，若决策通过，则允许访问资源，否则将禁止访问。")])])]),t._v(" "),n("h3",{attrs:{id:"accessdecisionmanager-访问决策管理器接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#accessdecisionmanager-访问决策管理器接口"}},[t._v("#")]),t._v(" AccessDecisionManager 访问决策管理器接口")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AccessDecisionManager")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * 用来鉴定当前用户是否有访问对应受保护资源的权限\n     * \n     * authentication：要访问资源的访问者的身份\n     * object：要访问的受保护资源，web请求对应FilterInvocation\n     * configAttributes：是受保护资源的访问策略，通过SecurityMetadataSource获取\n     */")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("decide")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Authentication")]),t._v(" authentication"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" object"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t\t"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collection")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConfigAttribute")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" configAttributes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AccessDeniedException")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t\t"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InsufficientAuthenticationException")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("supports")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConfigAttribute")]),t._v(" attribute"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("supports")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" clazz"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("AccessDecisionManager采用"),n("strong",[t._v("投票")]),t._v("的方式来确定是否能够访问受保护资源。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(327),alt:"image-20200907233136208"}})]),t._v(" "),n("p",[t._v("通过上图可以看出，AccessDecisionManager 中包含的一系列 AccessDecisionVoter 将会被用来对 Authentication 是否有权访问受保护对象进行投票，AccessDecisionManager 根据投票结果，做出最终决策。")]),t._v(" "),n("p",[t._v("AccessDecisionVoter是一个接口，其中定义有三个方法，具体结构如下所示。")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AccessDecisionVoter")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("S")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" ACCESS_GRANTED "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 同意")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" ACCESS_ABSTAIN "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 弃权")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" ACCESS_DENIED "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 拒绝")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("supports")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConfigAttribute")]),t._v(" var1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("supports")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" var1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("vote")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Authentication")]),t._v(" var1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("S")]),t._v(" var2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collection")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConfigAttribute")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" var3"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[n("code",[t._v("vote()")]),t._v("方法的返回结果会是 AccessDecisionVoter 中定义的三个常量之一。如果一个 AccessDecisionVoter 不能判定当前 Authentication 是否拥有访问对应受保护对象的权限，则其"),n("code",[t._v("vote()")]),t._v("方法的返回值应当为弃权 ACCESS_ABSTAIN。")]),t._v(" "),n("p",[t._v("Spring Security内置了三个基于投票的 AccessDecisionManager 实现类如下，它们分别是 "),n("strong",[t._v("AffirmativeBased")]),t._v("、"),n("strong",[t._v("ConsensusBased")]),t._v(" 和 "),n("strong",[t._v("UnanimousBased")]),t._v("。")]),t._v(" "),n("p",[t._v("AffirmativeBased（Spring Security 默认使用）的逻辑：")]),t._v(" "),n("ul",[n("li",[t._v("只要有 AccessDecisionVoter 的投票为 ACCESS_GRANTED 则同意用户进行访问")]),t._v(" "),n("li",[t._v("如果全部弃权也表示通过")]),t._v(" "),n("li",[t._v("如果没有一个人投赞成票，但是有人投反对票，则将抛出 AccessDeniedException")])]),t._v(" "),n("p",[t._v("ConsensusBased 的逻辑：")]),t._v(" "),n("ul",[n("li",[t._v("如果赞成票多于反对票则表示通过")]),t._v(" "),n("li",[t._v("反过来，如果反对票多于赞成票则将抛出 AccessDeniedException")]),t._v(" "),n("li",[t._v("如果赞成票与反对票相同且不等于0，并且属性 allowIfEqualGrantedDeniedDecisions的值为 true，则表示通过，否则将抛出异常 AccessDeniedException。参数 allowIfEqualGrantedDeniedDecisions 的值默认为 true")]),t._v(" "),n("li",[t._v("如果所有的 AccessDecisionVoter 都弃权了，则将视参数 allowIfAllAbstainDecisions 的值而定，如果该值为 true 则表示通过，否则将抛出异常 AccessDeniedException。参数 allowIfAllAbstainDecisions 的值默认为 false")])]),t._v(" "),n("p",[t._v("UnanimousBased 的逻辑与另外两种实现有点不一样，另外两种会一次性把受保护对象的配置属性全部传递给AccessDecisionVoter 进行投票，而 UnanimousBased 会一次只传递一个 ConfigAttribute 给 AccessDecisionVoter 进行投票。这也就意味着如果我们的 AccessDecisionVoter 的逻辑是只要传递进来的 ConfigAttribute 中有一个能够匹配则投赞成票，但是放到UnanimousBased 中其投票结果就不一定是赞成了。UnanimousBased 的逻辑具体来说是这样的：")]),t._v(" "),n("ul",[n("li",[t._v("如果受保护对象配置的某一个 ConfigAttribute 被任意的 AccessDecisionVoter 反对了，则将抛出 AccessDeniedException")]),t._v(" "),n("li",[t._v("如果没有反对票，但是有赞成票，则表示通过")]),t._v(" "),n("li",[t._v("如果全部弃权了，则将视参数 allowIfAllAbstainDecisions 的值而定，true 则通过，false 则抛出 AccessDeniedException")])]),t._v(" "),n("p",[t._v("Spring Security也内置一些投票者实现类如"),n("strong",[t._v("RoleVoter")]),t._v("、"),n("strong",[t._v("AuthenticatedVoter")]),t._v("和"),n("strong",[t._v("WebExpressionVoter")]),t._v("等，可以自行查阅资料进行学习。")])])}),[],!1,null,null,null);s.default=e.exports}}]);