(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{372:function(t,s,a){t.exports=a.p+"assets/img/image-20191007235010685.0a520a98.png"},373:function(t,s,a){t.exports=a.p+"assets/img/HashMap1.87973e3e.png"},374:function(t,s,a){t.exports=a.p+"assets/img/HashMap.58e67eae.png"},556:function(t,s,a){"use strict";a.r(s);var n=a(2),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"map"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[t._v("#")]),t._v(" Map")]),t._v(" "),n("p",[n("img",{attrs:{src:a(372),alt:"image-20191007235010685"}})]),t._v(" "),n("ul",[n("li",[n("p",[n("strong",[t._v("键值对")]),t._v("。类似函数：一个映射不能包含重复的键，每个键最多只能映射到一个值（"),n("strong",[t._v("键唯一，值可重复")]),t._v("），其实现类都重写了"),n("code",[t._v("toString()")]),t._v("方法")])]),t._v(" "),n("li",[n("p",[t._v("Map中的"),n("strong",[t._v("结构")]),t._v("：")]),t._v(" "),n("ul",[n("li",[t._v("key：无序、不可重复，使用 Set 存储。需重写 "),n("code",[t._v("equals()")]),t._v(" 、"),n("code",[t._v("HahsCode()")]),t._v("（根据是否是 Hash 存储）")]),t._v(" "),n("li",[t._v("value：无序、可重复，使用 Collection 存储。需重写 "),n("code",[t._v("equals()")])]),t._v(" "),n("li",[t._v("Entry：一个 key-value 对构成了一个 Entry 对象，使用 Set 存储")])])]),t._v(" "),n("li",[n("p",[t._v("带有"),n("code",[t._v("Hash*")]),t._v("存储自定义的对象时"),n("strong",[t._v("必须重写")]),n("code",[t._v("hashCode()")]),t._v("和"),n("code",[t._v("equal()")]),t._v("方法，且重写的俩方法尽可能保持"),n("strong",[t._v("一致性")]),t._v("（即相等的对象必须有相同的 hashCode ，不相等亦如此）")])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("常用方法")])]),t._v(" "),n("ul",[n("li",[n("p",[n("strong",[t._v("添加、修改")])]),t._v(" "),n("ul",[n("li",[n("p",[n("code",[t._v("V put(K key,V value)")])]),t._v(" "),n("p",[t._v("如果键是第一次存储，就直接存储元素，"),n("strong",[t._v("返回以前的值")]),t._v("null")]),t._v(" "),n("p",[t._v("如果键不是第一次存储，就替换掉以前的值，并"),n("strong",[t._v("返回以前的值")])])]),t._v(" "),n("li",[n("p",[n("code",[t._v("void putAll(Map<? extends K, ? extends V> m)")]),t._v("：每个元素单独 put")])])])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("删除")])]),t._v(" "),n("ul",[n("li",[n("code",[t._v("void clear()")]),t._v("                    删除所有映射关系")]),t._v(" "),n("li",[n("code",[t._v("V remove(Object key")]),t._v(")     根据键删除键值对元素，key为空返回null，否则返回值")])])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("获取")])]),t._v(" "),n("ul",[n("li",[n("code",[t._v("V get(Object key)")]),t._v("              根据键获取值")]),t._v(" "),n("li",[n("code",[t._v("Set<K> keySet()")]),t._v("                 返回所有键的集合")]),t._v(" "),n("li",[n("code",[t._v("Collection<V> values()")]),t._v("     返回所有值的集合")]),t._v(" "),n("li",[n("code",[t._v("Set<Map.Entry<K,V>> entrySet()")]),t._v("    返回映射关系的Set集合")])])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("判断")])]),t._v(" "),n("ul",[n("li",[n("code",[t._v("boolean isEmpty()")]),t._v("            是否为空")]),t._v(" "),n("li",[n("code",[t._v("boolean containsKey(Object key)")]),t._v("   是否包"),n("strong",[t._v("含指定键值")])]),t._v(" "),n("li",[n("code",[t._v("boolean containsValue(Object value)")]),t._v("  是否"),n("strong",[t._v("包含指定值")])])])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("容量")])]),t._v(" "),n("ul",[n("li",[n("code",[t._v("int size()")]),t._v("      返回映射中键值对的对数")])])])])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("遍历方法")])]),t._v(" "),n("ul",[n("li",[n("p",[n("strong",[t._v("JDK1.8及以后推荐使用"),n("code",[t._v("Stream")]),t._v("的"),n("code",[t._v("foreach()")]),t._v("方法，lambda表达式")])])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("键值对（"),n("code",[t._v("entrySet()")]),t._v("/"),n("code",[t._v("getKey()")]),t._v("/"),n("code",[t._v("getValue()")]),t._v("）")]),t._v("，获取存储键值对对象的Set结合。推荐此方法。")]),t._v(" "),n("p",[t._v("Map集合一创建，就会在Map集合中创建一个Entry对象，用来记录键值对对象（"),n("code",[t._v("Map.Entry<K,V>")]),t._v(")")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Entry")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" set "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" hm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("entrySet")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Entry")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" entry"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("set"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("entry"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1=hello")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("entry"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getKey")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"---"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("entry"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getValue")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1---hello")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("ul",[n("li",[n("p",[n("strong",[t._v("键找值（"),n("code",[t._v("keySet()")]),t._v("/"),n("code",[t._v("get()")]),t._v("）")])]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" set "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" hm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("keySet")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" key"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("set"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"---"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("hm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//或")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Iterator")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" it "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" set"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("iterator")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("it"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasNext")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" key  "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" it"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" value "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" hm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"---"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),n("li",[n("p",[n("strong",[n("code",[t._v("values()")]),t._v("方法，存储Map中值的Collection集合")])]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collection")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" values "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" hm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("values")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" value"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("values"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])])])])])]),t._v(" "),n("h2",{attrs:{id:"hashmap"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hashmap"}},[t._v("#")]),t._v(" HashMap")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("底层数据结构是"),n("strong",[t._v("哈希表（元素为链表或红黑树的数组）")]),t._v("，查询快。"),n("strong",[t._v("根据"),n("code",[t._v("hashCode")]),t._v("决定元素的存放位置")]),t._v("，但"),n("strong",[t._v("迭代出的元素顺序和存入顺序不一定一致")]),t._v("，底层存储"),n("strong",[t._v("不稳定")]),t._v("（hash重排）。")])]),t._v(" "),n("li",[n("p",[t._v("HashMap源码中的重要常量")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("DEFAULT_INITIAL_CAPACITY")]),t._v(" : HashMap的默认容量，16")]),t._v(" "),n("li",[n("code",[t._v("MAXIMUM_CAPACITY")]),t._v(" : HashMap的最大支持容量，2^30")]),t._v(" "),n("li",[n("code",[t._v("DEFAULT_LOAD_FACTOR")]),t._v(":HashMap的默认加载因子，0.75")]),t._v(" "),n("li",[n("code",[t._v("TREEIFY_THRESHOLD")]),t._v(":Bucket中链表长度大于该默认值，转化为红黑树")]),t._v(" "),n("li",[n("code",[t._v("UNTREEIFY_THRESHOLD")]),t._v(":Bucket中红黑树存储的Node小于该默认值，转化为链表")]),t._v(" "),n("li",[n("code",[t._v("MIN_TREEIFY_CAPACITY")]),t._v(":桶中的Node被树化时最小的hash表容量，64。（当桶中Node的数量大到需要变红黑树时，若hash表容量小于"),n("code",[t._v("MIN_TREEIFY_CAPACITY")]),t._v("时，此时应执行 resize扩容操作这个"),n("code",[t._v("MIN_TREEIFY_CAPACITY")]),t._v("的值至少是"),n("code",[t._v("TREEIFY_THRESHOLD")]),t._v("的4倍）")]),t._v(" "),n("li",[n("code",[t._v("table")]),t._v(":存储元素的数组，总是2的n次幂")]),t._v(" "),n("li",[n("code",[t._v("entrySet")]),t._v(":存储具体元素的集")]),t._v(" "),n("li",[n("code",[t._v("size")]),t._v(":HashMap中存储的键值对的数量")]),t._v(" "),n("li",[n("code",[t._v("modCount")]),t._v(":HashMap扩容和结构改变的次数。")]),t._v(" "),n("li",[n("code",[t._v("threshold")]),t._v(":扩容的临界值，容量*填充因子")]),t._v(" "),n("li",[n("code",[t._v("loadFactor")]),t._v(":填充因子")])])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("底层实现原理")]),t._v("（JDK7）：")]),t._v(" "),n("ul",[n("li",[n("p",[n("code",[t._v("HashMap")]),t._v("的内部存储结构其实是"),n("strong",[t._v("数组和链表")]),t._v("的结合。当实例化一个"),n("code",[t._v("HashMap")]),t._v("时， 系统会创建一个长度为"),n("code",[t._v("Capacity")]),t._v("的"),n("code",[t._v("Entry")]),t._v("数组，这个长度在哈希表中被称为容量 (Capacity)，在这个数组中可以存放元素的位置我们称之为“"),n("strong",[t._v("桶")]),t._v("”（"),n("code",[t._v("bucket")]),t._v("），每个"),n("code",[t._v("bucket")]),t._v("都有自己的索引，系统可以根据索引快速的查找"),n("code",[t._v("bucket")]),t._v("中的元素。")]),t._v(" "),n("p",[t._v("每个"),n("code",[t._v("bucket")]),t._v("中存储一个元素，即一个"),n("code",[t._v("Entry")]),t._v("对象，但每一个"),n("code",[t._v("Entry")]),t._v("对象可以带一个引用变量，用于指向下一个元素，因此，在一个桶中，就有可能生成一个"),n("code",[t._v("Entry")]),t._v("链。 而且新添加的元素作为链表的"),n("code",[t._v("head")]),t._v("。")]),t._v(" "),n("p",[n("code",[t._v("HashMap map = new HashMap([int initialCapacity])")]),t._v("在实例化以后，底层创建了**长度是"),n("code",[t._v("initialCapacity")]),t._v("（默认16）**的一维数组"),n("code",[t._v("Entry[] table")])])]),t._v(" "),n("li",[n("p",[t._v("可能已经执行过多次"),n("code",[t._v("put(.)")]),t._v("，"),n("code",[t._v("map.put(key1,value1)")]),t._v("。首先，调用"),n("code",[t._v("key1")]),t._v("所在类的"),n("code",[t._v("hashCode()")]),t._v("和其他算法计算其 "),n("code",[t._v("hash")]),t._v("，此"),n("code",[t._v("hash")]),t._v("经过某种算法计算以后（位运算方式取模），得到在"),n("code",[t._v("Entry[]")]),t._v("中的存放位置。")]),t._v(" "),n("ul",[n("li",[t._v("如果此位置上的数据为空，此时的 key1-value1 即 Entry添加成功。 ——情况1")]),t._v(" "),n("li",[t._v("如果此位置上的数据不为空（意味着此位置上存在一个或多个数据（以链表形式存在）），比较key1和已经存在的一个或多个数据的"),n("code",[t._v("hash")]),t._v("：\n"),n("ul",[n("li",[t._v("如果key1的"),n("code",[t._v("hash")]),t._v("与已经存在的数据的"),n("code",[t._v("hash")]),t._v("都不相同，此时key1-value1添加成功。——情况2")]),t._v(" "),n("li",[t._v("如果key1的"),n("code",[t._v("hash")]),t._v("和已经存在的某一个数据(key2-value2)的"),n("code",[t._v("hash")]),t._v("相同，继续比较：调用key1所在类的"),n("code",[t._v("equals(key2)")]),t._v("方法，比较：\n"),n("ul",[n("li",[t._v("如果"),n("code",[t._v("equals()")]),t._v("返回"),n("code",[t._v("false")]),t._v("：此时key1-value1添加成功。——情况3")]),t._v(" "),n("li",[t._v("如果"),n("code",[t._v("equals()")]),t._v("返回"),n("code",[t._v("true")]),t._v("：使用"),n("strong",[t._v("value1替换value2")]),t._v("。")])])])])])])]),t._v(" "),n("li",[n("p",[t._v("关于情况2和情况3：此时key1-value1和原来的数据以链表的方式存储。")])]),t._v(" "),n("li",[n("p",[t._v("当"),n("code",[t._v("HashMap")]),t._v("中的元素越来越多的时候，"),n("code",[t._v("hash")]),t._v("冲突的几率也就越来越高，因为数组的长度是固定的。所以为了提高查询的效率，就要对"),n("code",[t._v("HashMap")]),t._v("的数组进行扩容，而在"),n("code",[t._v("HashMap")]),t._v("数组扩容之后，最消耗性能的点就出现了："),n("strong",[t._v("原数组中的数据必须重新计算其在新数组中的位置")]),t._v("，并放进去，这就是"),n("code",[t._v("resize")]),t._v("。在超出临界值（"),n("strong",[t._v("使用率大于等于0.75，且要存放的位置非空")]),t._v("）时进行扩容。默认的扩容方式：扩容为原来容量的"),n("strong",[t._v("2倍")]),t._v("，并将原有的数据复制过来。所以如果我们已经预知"),n("code",[t._v("HashMap")]),t._v("中元素的个数， 那么预设元素的个数能够有效的提高"),n("code",[t._v("HashMap")]),t._v("的性能。")])])])]),t._v(" "),n("li",[n("p",[t._v("JDK8 相较于 JDK7 在底层实现方面的不同：")]),t._v(" "),n("ul",[n("li",[n("p",[n("code",[t._v("new HashMap([int initialCapacity])")]),t._v("底层没有创建一个长度为"),n("code",[t._v("initialCapacity")]),t._v("的数组（默认16），首次调用"),n("code",[t._v("put()")]),t._v("方法时，底层创建长度为"),n("code",[t._v("initialCapacity")]),t._v("的数组")])]),t._v(" "),n("li",[n("p",[t._v("JDK8 底层的数组是："),n("code",[t._v("Node[]")]),t._v("，而非"),n("code",[t._v("Entry[]")])]),t._v(" "),n("p",[t._v("每个"),n("code",[t._v("bucket")]),t._v("中存储一个元素，即一个"),n("code",[t._v("Node")]),t._v("对象，但每一个"),n("code",[t._v("Node")]),t._v("对象可以带 一个引用变量"),n("code",[t._v("next")]),t._v("，用于指向下一个元素，因此，在一个桶中，就有可能 生成一个"),n("code",[t._v("Node")]),t._v("链。也可能是一个一个"),n("code",[t._v("TreeNode")]),t._v("对象，每一个"),n("code",[t._v("TreeNode")]),t._v("对象可以有两个叶子结点"),n("code",[t._v("left")]),t._v("和"),n("code",[t._v("right")]),t._v("，因此，在一个桶中，就有可能生成一个"),n("code",[t._v("TreeNode")]),t._v("树。而新添加的元素作为链表的"),n("code",[t._v("last")]),t._v("，或树的叶子结点。")])]),t._v(" "),n("li",[n("p",[t._v("JDK7 底层结构只有：数组+链表。JDK8 中底层结构：数组+链表/红黑树。")]),t._v(" "),n("ul",[n("li",[t._v("形成链表时，七上八下（JDK7：新的元素指向旧的元素。JDK8：旧的元素指向新的元素，新元素在链表尾部）")]),t._v(" "),n("li",[t._v("当数组的某一个索引位置上（桶）的元素以链表形式存在的数据个数 >= 8 且当前数组的长度 >= 64时，此时此索引位置上的所数据改为使用红黑树存储；否则扩容，不进行转树操作。如果当映射关系被移除后， 下次"),n("code",[t._v("resize")]),t._v("方法时判断树的结点个数低于6个，也会把树再转为链表。")])])])])]),t._v(" "),n("li",[n("p",[n("code",[t._v("HashMap")]),t._v("中的内部类"),n("code",[t._v("Node")])]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Entry")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" hash"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),t._v(" key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),t._v(" value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n  "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v('"重地"和""通话""元素不同，但哈希值相同，'),n("strong",[t._v("哈希冲突")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(373),alt:""}})])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("哈希表元素唯一性")]),t._v("底层依赖两个方法："),n("strong",[n("code",[t._v("hashCode()")]),t._v("和"),n("code",[t._v("equals()")])]),t._v("，必须重写")]),t._v(" "),n("p",[n("img",{attrs:{src:a(374),alt:"HashMap"}})])])]),t._v(" "),n("h2",{attrs:{id:"linkedhashmap"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#linkedhashmap"}},[t._v("#")]),t._v(" LinkedHashMap")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("继承"),n("code",[t._v("HashMap")]),t._v("，底层是"),n("strong",[t._v("双向链表和哈希表")]),t._v("，迭代出的元素顺序和存入顺序"),n("strong",[t._v("一致")])]),t._v(" "),n("p",[t._v("在添加元素时重写了方法，"),n("code",[t._v("LinkedHashMap")]),t._v("中的内部类"),n("code",[t._v("Entry")])]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Entry")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashMap")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n  "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Entry")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" before"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" after"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Entry")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" hash"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),t._v(" key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),t._v(" value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hash"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),n("li",[n("p",[n("code",[t._v("LinkedHashMap")]),n("strong",[t._v("插入性能略低")]),t._v("于 "),n("code",[t._v("HashMap")]),t._v("，但在"),n("strong",[t._v("迭代访问")]),t._v(" "),n("code",[t._v("Map")]),t._v(" 里的"),n("strong",[t._v("全部元素")]),t._v("时"),n("strong",[t._v("有很好的性能")]),t._v("。")]),t._v(" "),n("p",[t._v("​")]),t._v(" "),n("p",[t._v("​")])])]),t._v(" "),n("h2",{attrs:{id:"treemap"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#treemap"}},[t._v("#")]),t._v(" TreeMap")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("底层数据结构是"),n("strong",[t._v("红黑树（自平衡二叉树），有序")]),t._v("。使用"),n("code",[t._v("TreeMap")]),t._v("保存自定义元素，这个元素的"),n("strong",[t._v("key必须实现"),n("code",[t._v("Comparable")]),t._v("接口")]),t._v("或构造时"),n("strong",[t._v("必须提供"),n("code",[t._v("Comparator")]),t._v("实现类")])]),t._v(" "),n("ul",[n("li",[t._v("元素唯一性通过红黑树存储时确定，相同元素丢弃， "),n("strong",[t._v("根据"),n("code",[t._v("compareTo")]),t._v("返回值是否是0来决定")])]),t._v(" "),n("li",[t._v("元素的顺序通过红黑树存储，并通过"),n("strong",[t._v("中（根）序遍历展示")])])])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("保证元素的排列方式（按照key排序）：")])]),t._v(" "),n("ol",[n("li",[n("p",[n("strong",[t._v("自然排序（元素具备比较性）")]),t._v("："),n("code",[t._v("Map")]),t._v(" 中的 "),n("code",[t._v("key")]),t._v(" 实现"),n("code",[t._v("Comparable")]),t._v("接口，重写"),n("code",[t._v("compareTo")]),t._v("。")]),t._v(" "),n("p",[t._v("向 "),n("code",[t._v("TreeMap")]),t._v(" 中添加元素时，只有第一个元素无须比较"),n("code",[t._v("compareTo()")]),t._v("方法，后面添加的所有元素都会调用"),n("code",[t._v("compareTo()")]),t._v("方法进行比较。且重写该对象对应的 "),n("code",[t._v("equals()")]),t._v(" 方法时，应保证该方法与 "),n("code",[t._v("compareTo(Object obj)")]),t._v(" 方法有一致的结果")])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("比较器排序（集合具备比较性）")]),t._v("：集合构造方法接收"),n("code",[t._v("key")]),t._v("实现"),n("code",[t._v("Comparator")]),t._v("接口的对象，重写"),n("code",[t._v("compare")]),t._v("。")]),t._v(" "),n("p",[t._v("向 "),n("code",[t._v("TreeMap")]),t._v(" 中添加元素时，只有第一个元素无须比较"),n("code",[t._v("compare()")]),t._v("方法，后面添加的所有元素都会调用"),n("code",[t._v("compare()")]),t._v("方法进行比较。且重写该对象对应的 "),n("code",[t._v("equals()")]),t._v(" 方法时，应保证该方法与 "),n("code",[t._v("compare()")]),t._v(" 方法有一致的结果")])]),t._v(" "),n("li",[n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeMap")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" map "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeMap")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n     "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Comparator")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("comparingInt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAge")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("thenComparing")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])])])]),t._v(" "),n("h2",{attrs:{id:"hashtable"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hashtable"}},[t._v("#")]),t._v(" Hashtable")]),t._v(" "),n("ul",[n("li",[t._v("线程安全，效率低，相比 HashMap 来说"),n("strong",[t._v("不能存储 null 的 key 或 value")])])]),t._v(" "),n("h2",{attrs:{id:"properties"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#properties"}},[t._v("#")]),t._v(" Properties")]),t._v(" "),n("ul",[n("li",[n("p",[n("code",[t._v("java.util.Properties")]),t._v(" 继承自"),n("code",[t._v("Hashtable")]),t._v(" ，来表示一个持久的"),n("strong",[t._v("属性集")]),t._v("。每个键及其对应值都是**"),n("code",[t._v("String")]),n("strong",[t._v("。可以")]),t._v("保存在流中或从流中加载**，常用于处理配置文件。")])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("特有功能")])]),t._v(" "),n("ul",[n("li",[n("code",[t._v("Object setProperty(String key,String value)")]),t._v("   添加元素，调用的父类的put方法")]),t._v(" "),n("li",[n("code",[t._v("String getProperty(String key)")]),t._v("   获取元素")]),t._v(" "),n("li",[n("code",[t._v("Set<String> stringPropertyNames()")]),t._v("   获取所有键的集合")])])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("和IO流结合的方法")])]),t._v(" "),n("ul",[n("li",[n("p",[t._v("把"),n("strong",[t._v("键值对形式的文本")]),t._v("文件内容"),n("strong",[t._v("加载")]),t._v("到集合中")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("void load(InputStream inStream)")]),t._v("：不能读取含有中文的键值对")]),t._v(" "),n("li",[n("code",[t._v("void load(Reader reader)")]),t._v("：能读取含有中文的键值对，"),n("strong",[t._v("所以一般用字符流")])])])]),t._v(" "),n("li",[n("p",[t._v("把集合中的数据"),n("strong",[t._v("存储")]),t._v("到文本文件中")]),t._v(" "),n("ul",[n("li",[n("p",[n("code",[t._v("void store(OutputStream out,String comments)")]),t._v("：不能写中文")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("void store(Writer writer,String comments)")]),t._v("："),n("strong",[t._v("可以写中文")])]),t._v(" "),n("p",[t._v("comments说明保存文字的用途，不能使用中文会乱码，默认是Unicode编码。一般空串"),n("code",[t._v('""')])])])])])])])]),t._v(" "),n("blockquote",[n("p",[t._v("文本中的数据，必须是键值对形式，默认就是字符串，不用加双引。可使用=、空格等分隔。#为注释。")])]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("myLoad")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BufferedInputStream")]),t._v(" bis "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BufferedInputStream")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileInputStream")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"prop.txt"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Properties")]),t._v(" prop "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Properties")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tprop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("load")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bis"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" set "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringPropertyNames")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" key "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" set"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lisi"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tprop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setProperty")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"100"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//还需要保存到指定文件，略。方法同下方myStore()。")]),t._v("\n\t\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\tbis"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("myStore")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Properties")]),t._v(" prop "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Properties")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tprop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setProperty")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"zhangsan"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tprop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setProperty")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lisi"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"4"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tprop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setProperty")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"wangwu"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"5"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BufferedOutputStream")]),t._v(" bos "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BufferedOutputStream")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileOutputStream")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"prop.txt"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tprop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("store")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bos"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mystore"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tbos"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);